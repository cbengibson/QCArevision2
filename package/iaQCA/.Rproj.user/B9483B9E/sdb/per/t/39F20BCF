{
    "contents" : "#' Irvine Robustness Assessment\n#' \n#' This function performs the the Irvine Assessment for QCA (iraQCA) on a given QCA model object.\n#' @import QCAGUI bootstrap\n#' @importFrom graphics hist\n#' @importFrom stats glm plogis predict quantile\n#' @importFrom utils flush.console\n#' @param mod name of the QCA eqmcc model object.\n#' @param sim the number of simulations the iraQCA function should run. Default set to \\code{sim=2000}.\n#' @param include [from QCA/QCAGUI package] ``A vector of additional output function values to be included in the minimization.'' Default set to \\code{include=c(\"\")}.\n#' @param row.dom [from QCA/QCAGUI package] ``Logical, impose row dominance as constraint on solution to eliminate dominated inessential prime implicants.'' Default set to \\code{F}.\n#' @param omit [from QCA/QCAGUI package] ``A vector of configuration index values or matrix of configurations to be omitted from minimization.'' Default set to \\code{omit=c()}.\n#' @param dir.exp [from QCA/QCAGUI package] ``A vector of directional expectations for deriving intermediate solutions.'' Default set to \\code{dir.exp=c()}.\n#' @return After some time, this function returns the probability that the data will return a random result given the parameters set by the researcher in the model (configurational n threshold, consistency score threshold, etc), as well a confidence interval around this value. This value is interpreted similarly to a p-value, i.e. a .05 value coincides with a 95\\% \"confidence level.\" \n#' @examples \n#' data(rallies)\n#' P<-rallies$P\n#' R<-rallies$R\n#' C<-rallies$C\n#' U<-rallies$U\n#' \n#' qca.data<-data.frame(P,R,C,U)\n#' truth<-truthTable(qca.data,outcome=\"P\",sort.by=\"incl\",incl.cut1=0.7,show.cases=TRUE)\n#' truth\n#' mod1 <- eqmcc(truth,details=TRUE,show.cases=TRUE)\n#' mod1\n#' \n#' iraQCA(mod1,sim=5) \n#' @export\niraQCA<-function(mod, sim=2000, include=c(\"\"), row.dom=F, omit=c(), dir.exp=c() ){\n  ptm <- proc.time()\n  \n  nconf<-rownames(mod$IC$overall$incl.cov) #names of the configuration(s)\n  incl.cut1<-mod$tt$incl.cut1 #consistency score of the configuration \n  incl.cut0<-mod$tt$incl.cut0 #consistency score of the configuration \n  n.cut<-min(mod$tt$tt$n)  #configurational n \n  pop<-dim(mod[[1]]$initial.data)[1] #population size\n  relation<-mod$relation\n  \n  notconditions<-names(mod[[1]][[1]])== c(\"OUT\") |  names(mod[[1]][[1]])== \"n\" | names(mod[[1]][[1]])==   \"incl\" | names(mod[[1]][[1]])== \"PRI\"  | names(mod[[1]][[1]])== \"cases\"\n  conditions<-names(mod$tt$tt)[!notconditions]\n  outcome<-mod$tt$outcome\n  qca.data<-mod$tt$initial.data\n  neg.out<-mod$tt$neg.out\n  \n  rows<-sim*2 #total number of rows\n  out<-qca.data[,outcome] #outcome vector\n  qca.data<-qca.data[,(names(qca.data) %in% conditions)] #matrix of causal conditions\n  data<-data.frame(cname=0,OUT=rep(NA,rows)) #empty data set to simulate into\n  \n  if (sum(outcome > 0 && outcome < 1) == 0){\n    type = \"crisp\"}\n  \n  if (sum(outcome > 0 && outcome < 1) != 0){\n    type = \"fuzzy\"}\n  \n  s.qca.data<-do.call(\"list\", replicate(sim, qca.data, simplify = FALSE))\n  \n  for (j in 1:sim) {\n    \n    if (type==\"crisp\"){\n      \n      for (i in 1:length(qca.data)){ #simulate random causal conditions\n        prob<-c(sum(qca.data[,i]==0)/(dim(qca.data)[1]),sum(qca.data[,i]==1)/dim(qca.data)[1]) #match distributions of data set\n        s.qca.data[[j]][,i]<-sample(c(0,1),pop,prob=prob,replace=T)} \n      #simulate random outcome variable\n      prob<-c(sum(out==0)/(length(out)),sum(out==1)/length(out)) #match distributions of data set\n      s.qca.data[[j]]$OUT<-sample(c(0,1),pop,prob=prob,replace=T)\n    }\n    \n    if (type == \"fuzzy\"){\n      \n      for (i in 1:length(qca.data)){ #simulate random causal conditions\n        ranges<-seq(from=0.1, to=1, by=.1) #better way to do this? could do a for loop\n        prob<-hist(qca.data[,i])[[2]]/dim(qca.data)[1]\n        s.qca.data[[j]][,i]<-sample(ranges,pop,prob=prob,replace=T)\n      } \n      #simulate random outcome variable\n      prob<-hist(out)[[2]]/length(out)\n      s.qca.data[[j]]$OUT<-sample(ranges,pop,prob=prob,replace=T)\n    }\n  }\n  \n  suppressWarnings(confList <- sapply(s.qca.data, function(x){tryCatch( #trap error\n    eqmcc(x,  outcome=c(\"OUT\"),  n.cut=n.cut, incl.cut1=incl.cut1, incl.cut0=incl.cut0, neg.out=neg.out, relation=relation, explain=mod$opts$explain,\n          conditions= c(names(x[,!(names(x) %in% 'OUT')]))),\n    error=function(e) e\n  )}))\n  \n  pars<-rep(NA, sim)\n  pars[sapply(confList, function(x) !inherits(x,\"error\"))]<-1\n  pars[sapply(confList, function(x) inherits(x,\"error\"))]<-0\n  #errs<-sapply(confList, function(x) grepl(\"Nothing to explain\",x) |  grepl(\"All combinations have been included into analysis\",x))\n  #pars[sapply(errs, function(x) sum(x))==1]<-0\n  \n  results<-mean(pars, na.rm=T)\n  \n  bsp<-bootstrap(pars,mean,nboot=1000)[[1]]\n  confInt<-quantile(bsp, prob=c(0.05, .95)) \n  \n  returnme<-list(results, confInt)\n  names(returnme)<-c(\"Probability\",\"Confidence Interval\")\n  return(returnme)\n  \n  #this is where I should assign values to a ltQCA \"class\"\n  \n}\n\n",
    "created" : 1451596344556.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3881116517",
    "id" : "39F20BCF",
    "lastKnownWriteTime" : 1451598446,
    "path" : "~/Desktop/package/iaQCA/R/iraQCA.R",
    "project_path" : "R/iraQCA.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}