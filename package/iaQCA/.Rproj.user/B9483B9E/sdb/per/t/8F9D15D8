{
    "contents" : "#' Irvine Robustness Recommendation\n#' \n#' Provides recommendations for consistency score and configurational n thresholds to attain a desired level of confidence in a QCA algorithm application.\n#' @import QCAGUI bootstrap\n#' @importFrom graphics hist\n#' @importFrom stats glm plogis predict quantile\n#' @importFrom utils flush.console\n#' @param qca.data the QCA data frame.\n#' @param outcome the outcome variable in the QCA data frame of causal conditions; \\code{\"OUT\"} is the outcome variable for an application of QCA.\n#' @param type type of QCA application, \\code{\"crisp\"} or \\code{\"fuzzy\"} sets. Default set to \\code{type = \"crisp\"}.\n#' @param inclcut range of consistency scores for inclusion. If not specified, this defaults to \\code{seq(from = 0.5, to = 1, by = 0.01)}.\n#' @param ncut configurational n levels to simulate. Can be altered to give options for the range of minimum to maximum \\code{ncut} value that the truth table yields, by naming the the truth table object (e.g. \\code{truth}) and calling the minimum and maximum number of cases, using \\code{ncut=min(truth$tt$n):max(truth$tt$n)} identified by the truth table. Default set to \\code{ncut=2}.\n#' @param neg.out [from QCA/QCAGUI package] ``Logical, use negation of outcome (ignored if data is a truth table object).'' Default set to \\code{neg.out=F}.\n#' @param sim number of simulations to run for each combination of parameters. The final number of simulations is \\code{length(inclcut)*length(ncut)*sim*2}. Default set to \\code{sim=10}.\n#' @param verbose prints the system time used to run the simulation and the percent complete. Default set to \\code{verbose=T}.\n#' @return Significance levels reached (.10,.05, .01, .001) when specifying a combination of inclcut, ncut, and neg.out in a QCA model.\n#' @examples\n#' data(rallies)\n#' P<-rallies$P\n#' R<-rallies$R\n#' C<-rallies$C\n#' U<-rallies$U\n#' \n#' qca.data<-data.frame(P,R,C,U)\n#' truth<-truthTable(qca.data,outcome=\"P\",sort.by=\"incl\",incl.cut1=0.7,show.cases=TRUE)\n#' truth\n#' mod1 <- eqmcc(truth,details=TRUE,show.cases=TRUE)\n#' mod1\n#' \n#' irrQCA(qca.data,outcome=\"P\",ncut=1,sim=1)\n#' @export\nirrQCA<-function(qca.data, outcome=\"OUT\", type=\"crisp\", inclcut = \"\", ncut=2, neg.out=F, sim=10, verbose=T){\n  s.data<-sim.iraQCA(qca.data, outcome, inclcut = inclcut, ncut=ncut, sim=sim, neg.out=F, type=type, verbose=verbose)\n  results<-conf.table(s.data, ncut)\n  return(results)\n}",
    "created" : 1440344741992.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1594390943",
    "id" : "8F9D15D8",
    "lastKnownWriteTime" : 1451598459,
    "path" : "~/Desktop/package/iaQCA/R/irrQCA.R",
    "project_path" : "R/irrQCA.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}