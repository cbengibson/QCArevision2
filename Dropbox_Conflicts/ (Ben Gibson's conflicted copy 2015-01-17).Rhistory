#simulate random outcome variable
prob<-hist(out)[[2]]/length(out)
s.qca.data[[j]]$OUT<-sample(ranges,pop,prob=prob,replace=T)
}
}
eqmcc(x,  outcome=c("OUT"),  n.cut=n.cut, incl.cut1=incl.cut1, incl.cut0=incl.cut0, neg.out=neg.out, relation=relation, explain=mod$opts$explain,
include=include, row.dom=row.dom, all.sol=all.sol, omit=omit, dir.exp=dir.exp,
conditions= c(names(x[,!(names(x) %in% 'OUT')])))
confList <- sapply(s.qca.data, function(x){tryCatch( #trap error
eqmcc(x,  outcome=c("OUT"),  n.cut=n.cut, incl.cut1=incl.cut1, incl.cut0=incl.cut0, neg.out=neg.out, relation=relation, explain=mod$opts$explain,
include=include, row.dom=row.dom, all.sol=all.sol, omit=omit, dir.exp=dir.exp,
conditions= c(names(x[,!(names(x) %in% 'OUT')]))),
error = function(e) e
)})
confList
n.cut<-5
confList <- sapply(s.qca.data, function(x){tryCatch( #trap error
eqmcc(x,  outcome=c("OUT"),  n.cut=n.cut, incl.cut1=incl.cut1, incl.cut0=incl.cut0, neg.out=neg.out, relation=relation, explain=mod$opts$explain,
include=include, row.dom=row.dom, all.sol=all.sol, omit=omit, dir.exp=dir.exp,
conditions= c(names(x[,!(names(x) %in% 'OUT')]))),
error = function(e) e
)})
confList
pars<-rep(NA, sim) #make sure to add an NA for any other error that may show up
pars[sapply(confList, function(x) !inherits(x,"error"))]<-1
errs<-sapply(confList, function(x) grepl("Nothing to explain",x) |  grepl("All combinations have been included into analysis",x))
pars[sapply(errs, function(x) sum(x))==1]<-0
results<-mean(pars, na.rm=T)
results
bsp<-bootstrap(pars,mean,nboot=1000)[[1]]
confInt<-quantile(bsp, prob=c(0.025, .975), na.rm=T)
returnme<-list(results, confInt)
names(returnme)<-c("Probability of Randomness","Confidence Interval")
confInt
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.65,n.cut=5,show.cases=TRUE)
states <- read.csv("states_new.csv",header=TRUE,sep=",")
states
W<-(states$r_2010_win==1)*1  	#W = Win, or the Republican won the election
P<-(states$pct_tp_primary>=50.00)*1		#T = TP Primary Win but Election Loss
#O<-calibrate(states$orgs_million,type="fuzzy",thresholds=c(4,8,11),logistic=TRUE)		#O = Orgs
O<-(states$orgs_million>=8)*1			#O = Orgs
#R<-calibrate(states$rallies_million,type="fuzzy",thresholds=c(1.5,2.25,3),logistic=TRUE)		#R = Rallies
R<-(states$rallies_million>=2.25)*1		#R = Rallies
C<-(states$r_context==1)*1		#C = Republican Partisan Context
E<-(states$endorsement==1)*1		#E = Endorsement
I<-(states$incumbent==1)*1		#I = Incumbent
data<-data.frame(I,C,E,O,R,W)
data
#row.names(data)<-(states$state_name)		#row names
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.65,n.cut=5,show.cases=TRUE)
mod1 <- eqmcc(truth,details=TRUE,show.cases=TRUE)
ltQCA(mod1)
mod
sim=2000
verbose=T
include=c("")
row.dom=F
all.sol=F
omit=c()
dir.exp=c()
conv.diag=F
require(QCA)
require(bootstrap)
ptm <- proc.time()
nconf<-rownames(mod$IC$overall$incl.cov) #names of the configuration(s)
incl.cut1<-mod$tt$incl.cut1 #consistency score of the configuration
incl.cut0<-mod$tt$incl.cut0 #consistency score of the configuration
n.cut<-min(mod$tt$tt$n)  #configurational n
pop<-dim(mod[[1]]$initial.data)[1] #population size
relation<-mod$relation
notconditions<-names(mod[[1]][[1]])== c("OUT") |  names(mod[[1]][[1]])== "n" | names(mod[[1]][[1]])==   "incl" | names(mod[[1]][[1]])== "PRI"  | names(mod[[1]][[1]])== "cases"
conditions<-names(mod$tt$tt)[!notconditions]
outcome<-mod$tt$outcome
qca.data<-mod$tt$initial.data
neg.out<-mod$tt$neg.out
rows<-sim*2 #total number of rows
out<-qca.data[,outcome] #outcome vector
qca.data<-qca.data[,(names(qca.data) %in% conditions)] #matrix of causal conditions
data<-data.frame(cname=0,OUT=rep(NA,rows)) #empty data set to simulate into
if (sum(outcome > 0 && outcome < 1) == 0){
type = "crisp"}
if (sum(outcome > 0 && outcome < 1) != 0){
type = "fuzzy"}
s.qca.data<-do.call("list", replicate(sim, qca.data, simplify = FALSE))
for (j in 1:sim) {
if (type=="crisp"){
for (i in 1:length(qca.data)){ #simulate random causal conditions
prob<-c(sum(qca.data[,i]==0)/(dim(qca.data)[1]),sum(qca.data[,i]==1)/dim(qca.data)[1]) #match distributions of data set
s.qca.data[[j]][,i]<-sample(c(0,1),pop,prob=prob,replace=T)}
#simulate random outcome variable
prob<-c(sum(out==0)/(length(out)),sum(out==1)/length(out)) #match distributions of data set
s.qca.data[[j]]$OUT<-sample(c(0,1),pop,prob=prob,replace=T)
}
if (type == "fuzzy"){
for (i in 1:length(qca.data)){ #simulate random causal conditions
ranges<-seq(from=0.1, to=1, by=.1) #better way to do this? could do a for loop
prob<-hist(qca.data[,i])[[2]]/dim(qca.data)[1]
s.qca.data[[j]][,i]<-sample(ranges,pop,prob=prob,replace=T)
}
#simulate random outcome variable
prob<-hist(out)[[2]]/length(out)
s.qca.data[[j]]$OUT<-sample(ranges,pop,prob=prob,replace=T)
}
}
confList <- sapply(s.qca.data, function(x){tryCatch( #trap error
eqmcc(x,  outcome=c("OUT"),  n.cut=n.cut, incl.cut1=incl.cut1, incl.cut0=incl.cut0, neg.out=neg.out, relation=relation, explain=mod$opts$explain,
include=include, row.dom=row.dom, all.sol=all.sol, omit=omit, dir.exp=dir.exp,
conditions= c(names(x[,!(names(x) %in% 'OUT')]))),
error = function(e) e
)})
confList
pars<-rep(NA, sim) #make sure to add an NA for any other error that may show up
pars[sapply(confList, function(x) !inherits(x,"error"))]<-1
errs<-sapply(confList, function(x) grepl("Nothing to explain",x) |  grepl("All combinations have been included into analysis",x))
pars[sapply(errs, function(x) sum(x))==1]<-0
results<-mean(pars, na.rm=T)
results
bsp<-bootstrap(pars,mean,nboot=1000)[[1]]
bsp
confInt<-quantile(bsp, prob=c(0.025, .975), na.rm=T)
confInt
returnme<-list(results, confInt)
names(returnme)<-c("Probability of Randomness","Confidence Interval")
ltQCA<-function(mod, sim=2000, verbose=T, include=c(""), row.dom=F, all.sol=F, omit=c(), dir.exp=c(), conv.diag=F  ){
require(QCA)
require(bootstrap)
ptm <- proc.time()
nconf<-rownames(mod$IC$overall$incl.cov) #names of the configuration(s)
incl.cut1<-mod$tt$incl.cut1 #consistency score of the configuration
incl.cut0<-mod$tt$incl.cut0 #consistency score of the configuration
n.cut<-min(mod$tt$tt$n)  #configurational n
pop<-dim(mod[[1]]$initial.data)[1] #population size
relation<-mod$relation
notconditions<-names(mod[[1]][[1]])== c("OUT") |  names(mod[[1]][[1]])== "n" | names(mod[[1]][[1]])==   "incl" | names(mod[[1]][[1]])== "PRI"  | names(mod[[1]][[1]])== "cases"
conditions<-names(mod$tt$tt)[!notconditions]
outcome<-mod$tt$outcome
qca.data<-mod$tt$initial.data
neg.out<-mod$tt$neg.out
rows<-sim*2 #total number of rows
out<-qca.data[,outcome] #outcome vector
qca.data<-qca.data[,(names(qca.data) %in% conditions)] #matrix of causal conditions
data<-data.frame(cname=0,OUT=rep(NA,rows)) #empty data set to simulate into
if (sum(outcome > 0 && outcome < 1) == 0){
type = "crisp"}
if (sum(outcome > 0 && outcome < 1) != 0){
type = "fuzzy"}
s.qca.data<-do.call("list", replicate(sim, qca.data, simplify = FALSE))
for (j in 1:sim) {
if (type=="crisp"){
for (i in 1:length(qca.data)){ #simulate random causal conditions
prob<-c(sum(qca.data[,i]==0)/(dim(qca.data)[1]),sum(qca.data[,i]==1)/dim(qca.data)[1]) #match distributions of data set
s.qca.data[[j]][,i]<-sample(c(0,1),pop,prob=prob,replace=T)}
#simulate random outcome variable
prob<-c(sum(out==0)/(length(out)),sum(out==1)/length(out)) #match distributions of data set
s.qca.data[[j]]$OUT<-sample(c(0,1),pop,prob=prob,replace=T)
}
if (type == "fuzzy"){
for (i in 1:length(qca.data)){ #simulate random causal conditions
ranges<-seq(from=0.1, to=1, by=.1) #better way to do this? could do a for loop
prob<-hist(qca.data[,i])[[2]]/dim(qca.data)[1]
s.qca.data[[j]][,i]<-sample(ranges,pop,prob=prob,replace=T)
}
#simulate random outcome variable
prob<-hist(out)[[2]]/length(out)
s.qca.data[[j]]$OUT<-sample(ranges,pop,prob=prob,replace=T)
}
}
confList <- sapply(s.qca.data, function(x){tryCatch( #trap error
eqmcc(x,  outcome=c("OUT"),  n.cut=n.cut, incl.cut1=incl.cut1, incl.cut0=incl.cut0, neg.out=neg.out, relation=relation, explain=mod$opts$explain,
include=include, row.dom=row.dom, all.sol=all.sol, omit=omit, dir.exp=dir.exp,
conditions= c(names(x[,!(names(x) %in% 'OUT')]))),
error = function(e) e
)})
pars<-rep(NA, sim) #make sure to add an NA for any other error that may show up
pars[sapply(confList, function(x) !inherits(x,"error"))]<-1
errs<-sapply(confList, function(x) grepl("Nothing to explain",x) |  grepl("All combinations have been included into analysis",x))
pars[sapply(errs, function(x) sum(x))==1]<-0
results<-mean(pars, na.rm=T)
bsp<-bootstrap(pars,mean,nboot=1000)[[1]]
confInt<-quantile(bsp, prob=c(0.025, .975), na.rm=T)
returnme<-list(results, confInt)
names(returnme)<-c("Probability of Randomness","Confidence Interval")
return(returnme)
}
states <- read.csv("states_new.csv",header=TRUE,sep=",")
states
W<-(states$r_2010_win==1)*1  	#W = Win, or the Republican won the election
P<-(states$pct_tp_primary>=50.00)*1		#T = TP Primary Win but Election Loss
#O<-calibrate(states$orgs_million,type="fuzzy",thresholds=c(4,8,11),logistic=TRUE)		#O = Orgs
O<-(states$orgs_million>=8)*1			#O = Orgs
#R<-calibrate(states$rallies_million,type="fuzzy",thresholds=c(1.5,2.25,3),logistic=TRUE)		#R = Rallies
R<-(states$rallies_million>=2.25)*1		#R = Rallies
C<-(states$r_context==1)*1		#C = Republican Partisan Context
E<-(states$endorsement==1)*1		#E = Endorsement
I<-(states$incumbent==1)*1		#I = Incumbent
data<-data.frame(I,C,E,O,R,W)
data
#row.names(data)<-(states$state_name)		#row names
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.65,n.cut=5,show.cases=TRUE)
mod1 <- eqmcc(truth,details=TRUE,show.cases=TRUE)
ltQCA(mod1)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
require(QCA)
require(bootstrap)
ptm <- proc.time()
nconf<-rownames(mod$IC$overall$incl.cov) #names of the configuration(s)
incl.cut1<-mod$tt$incl.cut1 #consistency score of the configuration
incl.cut0<-mod$tt$incl.cut0 #consistency score of the configuration
n.cut<-min(mod$tt$tt$n)  #configurational n
pop<-dim(mod[[1]]$initial.data)[1] #population size
relation<-mod$relation
notconditions<-names(mod[[1]][[1]])== c("OUT") |  names(mod[[1]][[1]])== "n" | names(mod[[1]][[1]])==   "incl" | names(mod[[1]][[1]])== "PRI"  | names(mod[[1]][[1]])== "cases"
conditions<-names(mod$tt$tt)[!notconditions]
outcome<-mod$tt$outcome
qca.data<-mod$tt$initial.data
neg.out<-mod$tt$neg.out
rows<-sim*2 #total number of rows
out<-qca.data[,outcome] #outcome vector
qca.data<-qca.data[,(names(qca.data) %in% conditions)] #matrix of causal conditions
data<-data.frame(cname=0,OUT=rep(NA,rows)) #empty data set to simulate into
if (sum(outcome > 0 && outcome < 1) == 0){
type = "crisp"}
if (sum(outcome > 0 && outcome < 1) != 0){
type = "fuzzy"}
s.qca.data<-do.call("list", replicate(sim, qca.data, simplify = FALSE))
for (j in 1:sim) {
if (type=="crisp"){
for (i in 1:length(qca.data)){ #simulate random causal conditions
prob<-c(sum(qca.data[,i]==0)/(dim(qca.data)[1]),sum(qca.data[,i]==1)/dim(qca.data)[1]) #match distributions of data set
s.qca.data[[j]][,i]<-sample(c(0,1),pop,prob=prob,replace=T)}
#simulate random outcome variable
prob<-c(sum(out==0)/(length(out)),sum(out==1)/length(out)) #match distributions of data set
s.qca.data[[j]]$OUT<-sample(c(0,1),pop,prob=prob,replace=T)
}
if (type == "fuzzy"){
for (i in 1:length(qca.data)){ #simulate random causal conditions
ranges<-seq(from=0.1, to=1, by=.1) #better way to do this? could do a for loop
prob<-hist(qca.data[,i])[[2]]/dim(qca.data)[1]
s.qca.data[[j]][,i]<-sample(ranges,pop,prob=prob,replace=T)
}
#simulate random outcome variable
prob<-hist(out)[[2]]/length(out)
s.qca.data[[j]]$OUT<-sample(ranges,pop,prob=prob,replace=T)
}
}
confList <- sapply(s.qca.data, function(x){tryCatch( #trap error
eqmcc(x,  outcome=c("OUT"),  n.cut=n.cut, incl.cut1=incl.cut1, incl.cut0=incl.cut0, neg.out=neg.out, relation=relation, explain=mod$opts$explain,
include=include, row.dom=row.dom, all.sol=all.sol, omit=omit, dir.exp=dir.exp,
conditions= c(names(x[,!(names(x) %in% 'OUT')]))),
error = function(e) e
)})
confList
pars<-rep(NA, sim) #make sure to add an NA for any other error that may show up
pars[sapply(confList, function(x) !inherits(x,"error"))]<-1
errs<-sapply(confList, function(x) grepl("Nothing to explain",x) |  grepl("All combinations have been included into analysis",x))
pars[sapply(errs, function(x) sum(x))==1]<-0
results<-mean(pars, na.rm=T)
bsp<-bootstrap(pars,mean,nboot=1000)[[1]]
bsp
bsp<-bootstrap(pars,mean,nboot=1000, na.rm=T)[[1]]
bsp
confInt<-quantile(bsp, prob=c(0.025, .975), na.rm=T)
confInt
source("complete_laQCA.R")
source("conv.diag.complete.R")
states <- read.csv("states_new.csv",header=TRUE,sep=",")
states
W<-(states$r_2010_win==1)*1  	#W = Win, or the Republican won the election
P<-(states$pct_tp_primary>=50.00)*1		#T = TP Primary Win but Election Loss
#O<-calibrate(states$orgs_million,type="fuzzy",thresholds=c(4,8,11),logistic=TRUE)		#O = Orgs
O<-(states$orgs_million>=8)*1			#O = Orgs
#R<-calibrate(states$rallies_million,type="fuzzy",thresholds=c(1.5,2.25,3),logistic=TRUE)		#R = Rallies
R<-(states$rallies_million>=2.25)*1		#R = Rallies
C<-(states$r_context==1)*1		#C = Republican Partisan Context
E<-(states$endorsement==1)*1		#E = Endorsement
I<-(states$incumbent==1)*1		#I = Incumbent
data<-data.frame(I,C,E,O,R,W)
data
#row.names(data)<-(states$state_name)		#row names
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.65,n.cut=5,show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
ltQCA(mod)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.85,n.cut=5,show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
ltQCA(mod)
data<-data.frame(C,E,O,R,W)
data
#row.names(data)<-(states$state_name)		#row names
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.85,n.cut=5,show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
ltQCA(mod)
data<-data.frame(I,E,O,R,W)
data
#row.names(data)<-(states$state_name)		#row names
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.85,n.cut=5,show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
ltQCA(mod)
data<-data.frame(I,C,O,R,W)
data
#row.names(data)<-(states$state_name)		#row names
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.85,n.cut=5,show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
ltQCA(mod)
data<-data.frame(I,C,E,R,W)
data
#row.names(data)<-(states$state_name)		#row names
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.85,n.cut=5,show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
ltQCA(mod)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.85,n.cut=3,show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
ltQCA(mod)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.85,n.cut=4,show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
ltQCA(mod)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.85,n.cut=1,show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.85,n.cut=4,show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.95,n.cut=4,show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
data<-data.frame(I,C,E,R,W)
summary(data)
data<-data.frame(I,C,E,O,R,W)
summary(data)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=0.95,show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
ltQCA(mod)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=1,show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
ltQCA(mod)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=.95,neg.out=T, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=.95,n.cut=T, show.cases=TRUE)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=.95,n.cut=4, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=.95,n.cut=2, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=.95,n.cut=3, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=.95,n.cut=4, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=.95,n.cut=5, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
data<-data.frame(E,O,R,W)
summary(data)
#row.names(data)<-(states$state_name)		#row names
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=.95,n.cut=5, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=.95,n.cut=1, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
ltQCA(mod)
data<-data.frame(E,O,R,W)
summary(data)
#row.names(data)<-(states$state_name)		#row names
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=.95,n.cut=1, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
data<-data.frame(O,R,W)
summary(data)
#row.names(data)<-(states$state_name)		#row names
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=.95,n.cut=1, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
data<-data.frame(I,C,E,O,R,W)
summary(data)
#row.names(data)<-(states$state_name)		#row names
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=.95,n.cut=1, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
ltQCA(mod)
rm(list=ls())
qca.data<-read.csv("Gamson.csv")
qca.data<-qca.data[,1:5]
#source("laQCA.R")
source("complete_laQCA.R")
source("conv.diag.complete.R")
mod<-eqmcc(qca.data,  outcome=c("ACP"),  n.cut=4, incl.cut1=.85, include="?", details = TRUE,  show.cases = TRUE, all.sol=T)
mod
prob<-ltQCA(mod, conv.diag=T)
prob
mod
mod<-eqmcc(qca.data,  outcome=c("ACP"),  n.cut=2, incl.cut1=.85, include="?", details = TRUE,  show.cases = TRUE, all.sol=T)
mod
prob<-ltQCA(mod)
prob
mod
mod<-eqmcc(qca.data,  outcome=c("ACP"),  n.cut=3, incl.cut1=.85, include="?", details = TRUE,  show.cases = TRUE, all.sol=T)
mod
mod<-eqmcc(qca.data,  outcome=c("ACP"),  n.cut=4, incl.cut1=.85, include="?", details = TRUE,  show.cases = TRUE, all.sol=T)
mod
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
data<-data.frame(I,C,E,O,R,W)
states <- read.csv("states_new.csv",header=TRUE,sep=",")
states
W<-(states$r_2010_win==1)*1  	#W = Win, or the Republican won the election
P<-(states$pct_tp_primary>=50.00)*1		#T = TP Primary Win but Election Loss
#O<-calibrate(states$orgs_million,type="fuzzy",thresholds=c(4,8,11),logistic=TRUE)		#O = Orgs
O<-(states$orgs_million>=8)*1			#O = Orgs
#R<-calibrate(states$rallies_million,type="fuzzy",thresholds=c(1.5,2.25,3),logistic=TRUE)		#R = Rallies
R<-(states$rallies_million>=2.25)*1		#R = Rallies
C<-(states$r_context==1)*1		#C = Republican Partisan Context
E<-(states$endorsement==1)*1		#E = Endorsement
I<-(states$incumbent==1)*1		#I = Incumbent
data<-data.frame(I,C,E,O,R,W)
summary(data)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut1=.95,n.cut=1, show.cases=TRUE)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.95,neg.out=T, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
ltQCA(mod)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.95,neg.out=T, n.cut=4, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.70,neg.out=T, n.cut=3, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
ltQCA(mod)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.70,neg.out=T, n.cut=2, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.80,neg.out=T, n.cut=2, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
ltQCA(mod)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.85,neg.out=T, n.cut=3, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
ltQCA(mod)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.85,neg.out=T, n.cut=2, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.85,neg.out=T, n.cut=3, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.85,neg.out=T, n.cut=3, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.85,neg.out=T, n.cut=4, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.75,neg.out=T, n.cut=4, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.75,neg.out=T, n.cut=3, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
ltQCA(mod)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=1,neg.out=T, n.cut=2, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
ltQCA(mod)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=1,neg.out=T, n.cut=1, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
ltQCA(mod)
Rhatresults<-cdQCA(mod, sim=2000)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.85,neg.out=T, n.cut=1, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.85,neg.out=T, n.cut=2, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.85,neg.out=T, n.cut=1, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
ltQCA(mod)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.85,neg.out=T, n.cut=2, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
ltQCA(mod)
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.85,neg.out=T, n.cut=3, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.85,neg.out=T, n.cut=2, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
truth<-truthTable(data,outcome="W",sort.by="incl",incl.cut0=.85,neg.out=T, n.cut=3, show.cases=TRUE)
mod <- eqmcc(truth,details=TRUE,show.cases=TRUE)
mod
ltQCA(mod)
mod
library("QCA")
source("sim.ltQCA.R")
source("configuration.table.R")
qca.data<-read.csv("Gamson.csv")
qca.data<-qca.data[,1:5]
mod<-eqmcc(qca.data,  outcome=c("ACP"),  n.cut=4, incl.cut1=.85, include="?", details = TRUE,  show.cases = TRUE, all.sol=T)
nvec<-mod$tt["n"]
nvec
mod$tt
nvec<-mod$tt[["n"]]
nvec
mod$tt
names(mod$tt)
nvec<-mod$tt$tt[["n"]]
nvec
2:max(nvec<-mod$tt$tt[["n"]])
2:max(mod$tt$tt[["n"]])
2:max(mod$tt$tt["n"])
